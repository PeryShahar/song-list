/* tslint:disable */
/* eslint-disable */
/**
 * Songs
 * The songs API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateSongDto
 */
export interface CreateSongDto {
    /**
     * The name of the song
     * @type {string}
     * @memberof CreateSongDto
     */
    songName: string;
    /**
     * The band name of the song
     * @type {string}
     * @memberof CreateSongDto
     */
    band: string;
    /**
     * The year of the song
     * @type {string}
     * @memberof CreateSongDto
     */
    year: string;
}
/**
 * 
 * @export
 * @interface SongDto
 */
export interface SongDto {
    /**
     * The ID of the songs
     * @type {number}
     * @memberof SongDto
     */
    id: number;
    /**
     * The name of the song
     * @type {string}
     * @memberof SongDto
     */
    songName: string;
    /**
     * The band name of the song
     * @type {string}
     * @memberof SongDto
     */
    band: string;
    /**
     * The year of the song
     * @type {string}
     * @memberof SongDto
     */
    year: string;
}
/**
 * 
 * @export
 * @interface UpdateSongDto
 */
export interface UpdateSongDto {
    /**
     * The name of the song
     * @type {string}
     * @memberof UpdateSongDto
     */
    songName: string;
    /**
     * The band name of the song
     * @type {string}
     * @memberof UpdateSongDto
     */
    band: string;
    /**
     * The year of the song
     * @type {string}
     * @memberof UpdateSongDto
     */
    year: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).appControllerGetHello(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: any) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SongsApi - axios parameter creator
 * @export
 */
export const SongsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerCreate: async (createSongDto: CreateSongDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSongDto' is not null or undefined
            if (createSongDto === null || createSongDto === undefined) {
                throw new RequiredError('createSongDto','Required parameter createSongDto was null or undefined when calling songsControllerCreate.');
            }
            const localVarPath = `/songs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createSongDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(createSongDto !== undefined ? createSongDto : {})
                : (createSongDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/songs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerFindOne: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling songsControllerFindOne.');
            }
            const localVarPath = `/songs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerRemove: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling songsControllerRemove.');
            }
            const localVarPath = `/songs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSongDto} updateSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerUpdate: async (id: string, updateSongDto: UpdateSongDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling songsControllerUpdate.');
            }
            // verify required parameter 'updateSongDto' is not null or undefined
            if (updateSongDto === null || updateSongDto === undefined) {
                throw new RequiredError('updateSongDto','Required parameter updateSongDto was null or undefined when calling songsControllerUpdate.');
            }
            const localVarPath = `/songs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof updateSongDto !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(updateSongDto !== undefined ? updateSongDto : {})
                : (updateSongDto || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SongsApi - functional programming interface
 * @export
 */
export const SongsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsControllerCreate(createSongDto: CreateSongDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SongsApiAxiosParamCreator(configuration).songsControllerCreate(createSongDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SongsApiAxiosParamCreator(configuration).songsControllerFindAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsControllerFindOne(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SongDto>> {
            const localVarAxiosArgs = await SongsApiAxiosParamCreator(configuration).songsControllerFindOne(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsControllerRemove(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SongsApiAxiosParamCreator(configuration).songsControllerRemove(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSongDto} updateSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsControllerUpdate(id: string, updateSongDto: UpdateSongDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SongsApiAxiosParamCreator(configuration).songsControllerUpdate(id, updateSongDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SongsApi - factory interface
 * @export
 */
export const SongsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerCreate(createSongDto: CreateSongDto, options?: any): AxiosPromise<void> {
            return SongsApiFp(configuration).songsControllerCreate(createSongDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerFindAll(options?: any): AxiosPromise<void> {
            return SongsApiFp(configuration).songsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerFindOne(id: string, options?: any): AxiosPromise<SongDto> {
            return SongsApiFp(configuration).songsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerRemove(id: string, options?: any): AxiosPromise<void> {
            return SongsApiFp(configuration).songsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSongDto} updateSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerUpdate(id: string, updateSongDto: UpdateSongDto, options?: any): AxiosPromise<void> {
            return SongsApiFp(configuration).songsControllerUpdate(id, updateSongDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for songsControllerCreate operation in SongsApi.
 * @export
 * @interface SongsApiSongsControllerCreateRequest
 */
export interface SongsApiSongsControllerCreateRequest {
    /**
     * 
     * @type {CreateSongDto}
     * @memberof SongsApiSongsControllerCreate
     */
    readonly createSongDto: CreateSongDto
}

/**
 * Request parameters for songsControllerFindOne operation in SongsApi.
 * @export
 * @interface SongsApiSongsControllerFindOneRequest
 */
export interface SongsApiSongsControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof SongsApiSongsControllerFindOne
     */
    readonly id: string
}

/**
 * Request parameters for songsControllerRemove operation in SongsApi.
 * @export
 * @interface SongsApiSongsControllerRemoveRequest
 */
export interface SongsApiSongsControllerRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof SongsApiSongsControllerRemove
     */
    readonly id: string
}

/**
 * Request parameters for songsControllerUpdate operation in SongsApi.
 * @export
 * @interface SongsApiSongsControllerUpdateRequest
 */
export interface SongsApiSongsControllerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SongsApiSongsControllerUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateSongDto}
     * @memberof SongsApiSongsControllerUpdate
     */
    readonly updateSongDto: UpdateSongDto
}

/**
 * SongsApi - object-oriented interface
 * @export
 * @class SongsApi
 * @extends {BaseAPI}
 */
export class SongsApi extends BaseAPI {
    /**
     * 
     * @param {SongsApiSongsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongsApi
     */
    public songsControllerCreate(requestParameters: SongsApiSongsControllerCreateRequest, options?: any) {
        return SongsApiFp(this.configuration).songsControllerCreate(requestParameters.createSongDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongsApi
     */
    public songsControllerFindAll(options?: any) {
        return SongsApiFp(this.configuration).songsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SongsApiSongsControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongsApi
     */
    public songsControllerFindOne(requestParameters: SongsApiSongsControllerFindOneRequest, options?: any) {
        return SongsApiFp(this.configuration).songsControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SongsApiSongsControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongsApi
     */
    public songsControllerRemove(requestParameters: SongsApiSongsControllerRemoveRequest, options?: any) {
        return SongsApiFp(this.configuration).songsControllerRemove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SongsApiSongsControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongsApi
     */
    public songsControllerUpdate(requestParameters: SongsApiSongsControllerUpdateRequest, options?: any) {
        return SongsApiFp(this.configuration).songsControllerUpdate(requestParameters.id, requestParameters.updateSongDto, options).then((request) => request(this.axios, this.basePath));
    }
}


