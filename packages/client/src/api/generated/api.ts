/* tslint:disable */
/* eslint-disable */
/**
 * Songs
 * The songs API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateSongDto
 */
export interface CreateSongDto {
    /**
     * The name of the song
     * @type {string}
     * @memberof CreateSongDto
     */
    songName: string;
    /**
     * The band name of the song
     * @type {string}
     * @memberof CreateSongDto
     */
    band: string;
    /**
     * The year of the song
     * @type {string}
     * @memberof CreateSongDto
     */
    year: string;
}
/**
 * 
 * @export
 * @interface SongDto
 */
export interface SongDto {
    /**
     * The ID of the songs
     * @type {number}
     * @memberof SongDto
     */
    id: number;
    /**
     * The name of the song
     * @type {string}
     * @memberof SongDto
     */
    songName: string;
    /**
     * The band name of the song
     * @type {string}
     * @memberof SongDto
     */
    band: string;
    /**
     * The year of the song
     * @type {string}
     * @memberof SongDto
     */
    year: string;
}
/**
 * 
 * @export
 * @interface UpdateSongDto
 */
export interface UpdateSongDto {
    /**
     * The name of the song
     * @type {string}
     * @memberof UpdateSongDto
     */
    songName: string;
    /**
     * The band name of the song
     * @type {string}
     * @memberof UpdateSongDto
     */
    band: string;
    /**
     * The year of the song
     * @type {string}
     * @memberof UpdateSongDto
     */
    year: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).appControllerGetHello(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: any) {
        return DefaultApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SongsApi - axios parameter creator
 * @export
 */
export const SongsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/songs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SongsApi - functional programming interface
 * @export
 */
export const SongsApiFp = function(configuration?: Configuration) {
    return {
        async songsControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SongsApiAxiosParamCreator(configuration).songsControllerFindAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SongsApi - factory interface
 * @export
 */
export const SongsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsControllerFindAll(options?: any): AxiosPromise<void> {
            return SongsApiFp(configuration).songsControllerFindAll(options).then((request) => request(axios, basePath));
        },
     
    };
};


/**
 * Request parameters for songsControllerFindOne operation in SongsApi.
 * @export
 * @interface SongsApiSongsControllerFindOneRequest
 */
export interface SongsApiSongsControllerFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof SongsApiSongsControllerFindOne
     */
    readonly id: string
}

/**
 * SongsApi - object-oriented interface
 * @export
 * @class SongsApi
 * @extends {BaseAPI}
 */
export class SongsApi extends BaseAPI {
   
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongsApi
     */
    public songsControllerFindAll(options?: any) {
        return SongsApiFp(this.configuration).songsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }
}


